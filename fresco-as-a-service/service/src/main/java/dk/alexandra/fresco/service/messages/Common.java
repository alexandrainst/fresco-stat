// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

package dk.alexandra.fresco.service.messages;

public final class Common {
  private Common() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface VectorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dk.alexandra.fresco.service.messages.Vector)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated double value = 1;</code>
     * @return A list containing the value.
     */
    java.util.List<java.lang.Double> getValueList();
    /**
     * <code>repeated double value = 1;</code>
     * @return The count of value.
     */
    int getValueCount();
    /**
     * <code>repeated double value = 1;</code>
     * @param index The index of the element to return.
     * @return The value at the given index.
     */
    double getValue(int index);
  }
  /**
   * Protobuf type {@code dk.alexandra.fresco.service.messages.Vector}
   */
  public static final class Vector extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dk.alexandra.fresco.service.messages.Vector)
      VectorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Vector.newBuilder() to construct.
    private Vector(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Vector() {
      value_ = emptyDoubleList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Vector();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Vector(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                value_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              value_.addDouble(input.readDouble());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                value_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                value_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          value_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dk.alexandra.fresco.service.messages.Common.internal_static_dk_alexandra_fresco_service_messages_Vector_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dk.alexandra.fresco.service.messages.Common.internal_static_dk_alexandra_fresco_service_messages_Vector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dk.alexandra.fresco.service.messages.Common.Vector.class, dk.alexandra.fresco.service.messages.Common.Vector.Builder.class);
    }

    public static final int VALUE_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.DoubleList value_;
    /**
     * <code>repeated double value = 1;</code>
     * @return A list containing the value.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getValueList() {
      return value_;
    }
    /**
     * <code>repeated double value = 1;</code>
     * @return The count of value.
     */
    public int getValueCount() {
      return value_.size();
    }
    /**
     * <code>repeated double value = 1;</code>
     * @param index The index of the element to return.
     * @return The value at the given index.
     */
    public double getValue(int index) {
      return value_.getDouble(index);
    }
    private int valueMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getValueList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(valueMemoizedSerializedSize);
      }
      for (int i = 0; i < value_.size(); i++) {
        output.writeDoubleNoTag(value_.getDouble(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * getValueList().size();
        size += dataSize;
        if (!getValueList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        valueMemoizedSerializedSize = dataSize;
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dk.alexandra.fresco.service.messages.Common.Vector)) {
        return super.equals(obj);
      }
      dk.alexandra.fresco.service.messages.Common.Vector other = (dk.alexandra.fresco.service.messages.Common.Vector) obj;

      if (!getValueList()
          .equals(other.getValueList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getValueCount() > 0) {
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getValueList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dk.alexandra.fresco.service.messages.Common.Vector parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dk.alexandra.fresco.service.messages.Common.Vector parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dk.alexandra.fresco.service.messages.Common.Vector parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dk.alexandra.fresco.service.messages.Common.Vector parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dk.alexandra.fresco.service.messages.Common.Vector parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dk.alexandra.fresco.service.messages.Common.Vector parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dk.alexandra.fresco.service.messages.Common.Vector parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dk.alexandra.fresco.service.messages.Common.Vector parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dk.alexandra.fresco.service.messages.Common.Vector parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dk.alexandra.fresco.service.messages.Common.Vector parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dk.alexandra.fresco.service.messages.Common.Vector parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dk.alexandra.fresco.service.messages.Common.Vector parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dk.alexandra.fresco.service.messages.Common.Vector prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dk.alexandra.fresco.service.messages.Vector}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dk.alexandra.fresco.service.messages.Vector)
        dk.alexandra.fresco.service.messages.Common.VectorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dk.alexandra.fresco.service.messages.Common.internal_static_dk_alexandra_fresco_service_messages_Vector_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dk.alexandra.fresco.service.messages.Common.internal_static_dk_alexandra_fresco_service_messages_Vector_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dk.alexandra.fresco.service.messages.Common.Vector.class, dk.alexandra.fresco.service.messages.Common.Vector.Builder.class);
      }

      // Construct using dk.alexandra.fresco.service.messages.Common.Vector.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        value_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dk.alexandra.fresco.service.messages.Common.internal_static_dk_alexandra_fresco_service_messages_Vector_descriptor;
      }

      @java.lang.Override
      public dk.alexandra.fresco.service.messages.Common.Vector getDefaultInstanceForType() {
        return dk.alexandra.fresco.service.messages.Common.Vector.getDefaultInstance();
      }

      @java.lang.Override
      public dk.alexandra.fresco.service.messages.Common.Vector build() {
        dk.alexandra.fresco.service.messages.Common.Vector result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dk.alexandra.fresco.service.messages.Common.Vector buildPartial() {
        dk.alexandra.fresco.service.messages.Common.Vector result = new dk.alexandra.fresco.service.messages.Common.Vector(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) != 0)) {
          value_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.value_ = value_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dk.alexandra.fresco.service.messages.Common.Vector) {
          return mergeFrom((dk.alexandra.fresco.service.messages.Common.Vector)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dk.alexandra.fresco.service.messages.Common.Vector other) {
        if (other == dk.alexandra.fresco.service.messages.Common.Vector.getDefaultInstance()) return this;
        if (!other.value_.isEmpty()) {
          if (value_.isEmpty()) {
            value_ = other.value_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureValueIsMutable();
            value_.addAll(other.value_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dk.alexandra.fresco.service.messages.Common.Vector parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dk.alexandra.fresco.service.messages.Common.Vector) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.DoubleList value_ = emptyDoubleList();
      private void ensureValueIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          value_ = mutableCopy(value_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated double value = 1;</code>
       * @return A list containing the value.
       */
      public java.util.List<java.lang.Double>
          getValueList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(value_) : value_;
      }
      /**
       * <code>repeated double value = 1;</code>
       * @return The count of value.
       */
      public int getValueCount() {
        return value_.size();
      }
      /**
       * <code>repeated double value = 1;</code>
       * @param index The index of the element to return.
       * @return The value at the given index.
       */
      public double getValue(int index) {
        return value_.getDouble(index);
      }
      /**
       * <code>repeated double value = 1;</code>
       * @param index The index to set the value at.
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(
          int index, double value) {
        ensureValueIsMutable();
        value_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double value = 1;</code>
       * @param value The value to add.
       * @return This builder for chaining.
       */
      public Builder addValue(double value) {
        ensureValueIsMutable();
        value_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double value = 1;</code>
       * @param values The value to add.
       * @return This builder for chaining.
       */
      public Builder addAllValue(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureValueIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, value_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double value = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        value_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dk.alexandra.fresco.service.messages.Vector)
    }

    // @@protoc_insertion_point(class_scope:dk.alexandra.fresco.service.messages.Vector)
    private static final dk.alexandra.fresco.service.messages.Common.Vector DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dk.alexandra.fresco.service.messages.Common.Vector();
    }

    public static dk.alexandra.fresco.service.messages.Common.Vector getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Vector>
        PARSER = new com.google.protobuf.AbstractParser<Vector>() {
      @java.lang.Override
      public Vector parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Vector(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Vector> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Vector> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dk.alexandra.fresco.service.messages.Common.Vector getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MatrixOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dk.alexandra.fresco.service.messages.Matrix)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
     */
    java.util.List<dk.alexandra.fresco.service.messages.Common.Vector> 
        getRowsList();
    /**
     * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
     */
    dk.alexandra.fresco.service.messages.Common.Vector getRows(int index);
    /**
     * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
     */
    int getRowsCount();
    /**
     * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
     */
    java.util.List<? extends dk.alexandra.fresco.service.messages.Common.VectorOrBuilder> 
        getRowsOrBuilderList();
    /**
     * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
     */
    dk.alexandra.fresco.service.messages.Common.VectorOrBuilder getRowsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dk.alexandra.fresco.service.messages.Matrix}
   */
  public static final class Matrix extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:dk.alexandra.fresco.service.messages.Matrix)
      MatrixOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Matrix.newBuilder() to construct.
    private Matrix(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Matrix() {
      rows_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Matrix();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Matrix(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                rows_ = new java.util.ArrayList<dk.alexandra.fresco.service.messages.Common.Vector>();
                mutable_bitField0_ |= 0x00000001;
              }
              rows_.add(
                  input.readMessage(dk.alexandra.fresco.service.messages.Common.Vector.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          rows_ = java.util.Collections.unmodifiableList(rows_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dk.alexandra.fresco.service.messages.Common.internal_static_dk_alexandra_fresco_service_messages_Matrix_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dk.alexandra.fresco.service.messages.Common.internal_static_dk_alexandra_fresco_service_messages_Matrix_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dk.alexandra.fresco.service.messages.Common.Matrix.class, dk.alexandra.fresco.service.messages.Common.Matrix.Builder.class);
    }

    public static final int ROWS_FIELD_NUMBER = 1;
    private java.util.List<dk.alexandra.fresco.service.messages.Common.Vector> rows_;
    /**
     * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
     */
    @java.lang.Override
    public java.util.List<dk.alexandra.fresco.service.messages.Common.Vector> getRowsList() {
      return rows_;
    }
    /**
     * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends dk.alexandra.fresco.service.messages.Common.VectorOrBuilder> 
        getRowsOrBuilderList() {
      return rows_;
    }
    /**
     * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
     */
    @java.lang.Override
    public int getRowsCount() {
      return rows_.size();
    }
    /**
     * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
     */
    @java.lang.Override
    public dk.alexandra.fresco.service.messages.Common.Vector getRows(int index) {
      return rows_.get(index);
    }
    /**
     * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
     */
    @java.lang.Override
    public dk.alexandra.fresco.service.messages.Common.VectorOrBuilder getRowsOrBuilder(
        int index) {
      return rows_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < rows_.size(); i++) {
        output.writeMessage(1, rows_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < rows_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, rows_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dk.alexandra.fresco.service.messages.Common.Matrix)) {
        return super.equals(obj);
      }
      dk.alexandra.fresco.service.messages.Common.Matrix other = (dk.alexandra.fresco.service.messages.Common.Matrix) obj;

      if (!getRowsList()
          .equals(other.getRowsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getRowsCount() > 0) {
        hash = (37 * hash) + ROWS_FIELD_NUMBER;
        hash = (53 * hash) + getRowsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dk.alexandra.fresco.service.messages.Common.Matrix parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dk.alexandra.fresco.service.messages.Common.Matrix parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dk.alexandra.fresco.service.messages.Common.Matrix parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dk.alexandra.fresco.service.messages.Common.Matrix parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dk.alexandra.fresco.service.messages.Common.Matrix parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dk.alexandra.fresco.service.messages.Common.Matrix parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dk.alexandra.fresco.service.messages.Common.Matrix parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dk.alexandra.fresco.service.messages.Common.Matrix parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dk.alexandra.fresco.service.messages.Common.Matrix parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dk.alexandra.fresco.service.messages.Common.Matrix parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dk.alexandra.fresco.service.messages.Common.Matrix parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dk.alexandra.fresco.service.messages.Common.Matrix parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dk.alexandra.fresco.service.messages.Common.Matrix prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dk.alexandra.fresco.service.messages.Matrix}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dk.alexandra.fresco.service.messages.Matrix)
        dk.alexandra.fresco.service.messages.Common.MatrixOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dk.alexandra.fresco.service.messages.Common.internal_static_dk_alexandra_fresco_service_messages_Matrix_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dk.alexandra.fresco.service.messages.Common.internal_static_dk_alexandra_fresco_service_messages_Matrix_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dk.alexandra.fresco.service.messages.Common.Matrix.class, dk.alexandra.fresco.service.messages.Common.Matrix.Builder.class);
      }

      // Construct using dk.alexandra.fresco.service.messages.Common.Matrix.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getRowsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (rowsBuilder_ == null) {
          rows_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          rowsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dk.alexandra.fresco.service.messages.Common.internal_static_dk_alexandra_fresco_service_messages_Matrix_descriptor;
      }

      @java.lang.Override
      public dk.alexandra.fresco.service.messages.Common.Matrix getDefaultInstanceForType() {
        return dk.alexandra.fresco.service.messages.Common.Matrix.getDefaultInstance();
      }

      @java.lang.Override
      public dk.alexandra.fresco.service.messages.Common.Matrix build() {
        dk.alexandra.fresco.service.messages.Common.Matrix result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dk.alexandra.fresco.service.messages.Common.Matrix buildPartial() {
        dk.alexandra.fresco.service.messages.Common.Matrix result = new dk.alexandra.fresco.service.messages.Common.Matrix(this);
        int from_bitField0_ = bitField0_;
        if (rowsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            rows_ = java.util.Collections.unmodifiableList(rows_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.rows_ = rows_;
        } else {
          result.rows_ = rowsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dk.alexandra.fresco.service.messages.Common.Matrix) {
          return mergeFrom((dk.alexandra.fresco.service.messages.Common.Matrix)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dk.alexandra.fresco.service.messages.Common.Matrix other) {
        if (other == dk.alexandra.fresco.service.messages.Common.Matrix.getDefaultInstance()) return this;
        if (rowsBuilder_ == null) {
          if (!other.rows_.isEmpty()) {
            if (rows_.isEmpty()) {
              rows_ = other.rows_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureRowsIsMutable();
              rows_.addAll(other.rows_);
            }
            onChanged();
          }
        } else {
          if (!other.rows_.isEmpty()) {
            if (rowsBuilder_.isEmpty()) {
              rowsBuilder_.dispose();
              rowsBuilder_ = null;
              rows_ = other.rows_;
              bitField0_ = (bitField0_ & ~0x00000001);
              rowsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRowsFieldBuilder() : null;
            } else {
              rowsBuilder_.addAllMessages(other.rows_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dk.alexandra.fresco.service.messages.Common.Matrix parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dk.alexandra.fresco.service.messages.Common.Matrix) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<dk.alexandra.fresco.service.messages.Common.Vector> rows_ =
        java.util.Collections.emptyList();
      private void ensureRowsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          rows_ = new java.util.ArrayList<dk.alexandra.fresco.service.messages.Common.Vector>(rows_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dk.alexandra.fresco.service.messages.Common.Vector, dk.alexandra.fresco.service.messages.Common.Vector.Builder, dk.alexandra.fresco.service.messages.Common.VectorOrBuilder> rowsBuilder_;

      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public java.util.List<dk.alexandra.fresco.service.messages.Common.Vector> getRowsList() {
        if (rowsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rows_);
        } else {
          return rowsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public int getRowsCount() {
        if (rowsBuilder_ == null) {
          return rows_.size();
        } else {
          return rowsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public dk.alexandra.fresco.service.messages.Common.Vector getRows(int index) {
        if (rowsBuilder_ == null) {
          return rows_.get(index);
        } else {
          return rowsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public Builder setRows(
          int index, dk.alexandra.fresco.service.messages.Common.Vector value) {
        if (rowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowsIsMutable();
          rows_.set(index, value);
          onChanged();
        } else {
          rowsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public Builder setRows(
          int index, dk.alexandra.fresco.service.messages.Common.Vector.Builder builderForValue) {
        if (rowsBuilder_ == null) {
          ensureRowsIsMutable();
          rows_.set(index, builderForValue.build());
          onChanged();
        } else {
          rowsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public Builder addRows(dk.alexandra.fresco.service.messages.Common.Vector value) {
        if (rowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowsIsMutable();
          rows_.add(value);
          onChanged();
        } else {
          rowsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public Builder addRows(
          int index, dk.alexandra.fresco.service.messages.Common.Vector value) {
        if (rowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRowsIsMutable();
          rows_.add(index, value);
          onChanged();
        } else {
          rowsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public Builder addRows(
          dk.alexandra.fresco.service.messages.Common.Vector.Builder builderForValue) {
        if (rowsBuilder_ == null) {
          ensureRowsIsMutable();
          rows_.add(builderForValue.build());
          onChanged();
        } else {
          rowsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public Builder addRows(
          int index, dk.alexandra.fresco.service.messages.Common.Vector.Builder builderForValue) {
        if (rowsBuilder_ == null) {
          ensureRowsIsMutable();
          rows_.add(index, builderForValue.build());
          onChanged();
        } else {
          rowsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public Builder addAllRows(
          java.lang.Iterable<? extends dk.alexandra.fresco.service.messages.Common.Vector> values) {
        if (rowsBuilder_ == null) {
          ensureRowsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, rows_);
          onChanged();
        } else {
          rowsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public Builder clearRows() {
        if (rowsBuilder_ == null) {
          rows_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          rowsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public Builder removeRows(int index) {
        if (rowsBuilder_ == null) {
          ensureRowsIsMutable();
          rows_.remove(index);
          onChanged();
        } else {
          rowsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public dk.alexandra.fresco.service.messages.Common.Vector.Builder getRowsBuilder(
          int index) {
        return getRowsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public dk.alexandra.fresco.service.messages.Common.VectorOrBuilder getRowsOrBuilder(
          int index) {
        if (rowsBuilder_ == null) {
          return rows_.get(index);  } else {
          return rowsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public java.util.List<? extends dk.alexandra.fresco.service.messages.Common.VectorOrBuilder> 
           getRowsOrBuilderList() {
        if (rowsBuilder_ != null) {
          return rowsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rows_);
        }
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public dk.alexandra.fresco.service.messages.Common.Vector.Builder addRowsBuilder() {
        return getRowsFieldBuilder().addBuilder(
            dk.alexandra.fresco.service.messages.Common.Vector.getDefaultInstance());
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public dk.alexandra.fresco.service.messages.Common.Vector.Builder addRowsBuilder(
          int index) {
        return getRowsFieldBuilder().addBuilder(
            index, dk.alexandra.fresco.service.messages.Common.Vector.getDefaultInstance());
      }
      /**
       * <code>repeated .dk.alexandra.fresco.service.messages.Vector rows = 1;</code>
       */
      public java.util.List<dk.alexandra.fresco.service.messages.Common.Vector.Builder> 
           getRowsBuilderList() {
        return getRowsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dk.alexandra.fresco.service.messages.Common.Vector, dk.alexandra.fresco.service.messages.Common.Vector.Builder, dk.alexandra.fresco.service.messages.Common.VectorOrBuilder> 
          getRowsFieldBuilder() {
        if (rowsBuilder_ == null) {
          rowsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dk.alexandra.fresco.service.messages.Common.Vector, dk.alexandra.fresco.service.messages.Common.Vector.Builder, dk.alexandra.fresco.service.messages.Common.VectorOrBuilder>(
                  rows_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          rows_ = null;
        }
        return rowsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:dk.alexandra.fresco.service.messages.Matrix)
    }

    // @@protoc_insertion_point(class_scope:dk.alexandra.fresco.service.messages.Matrix)
    private static final dk.alexandra.fresco.service.messages.Common.Matrix DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dk.alexandra.fresco.service.messages.Common.Matrix();
    }

    public static dk.alexandra.fresco.service.messages.Common.Matrix getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Matrix>
        PARSER = new com.google.protobuf.AbstractParser<Matrix>() {
      @java.lang.Override
      public Matrix parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Matrix(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Matrix> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Matrix> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dk.alexandra.fresco.service.messages.Common.Matrix getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dk_alexandra_fresco_service_messages_Vector_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dk_alexandra_fresco_service_messages_Vector_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dk_alexandra_fresco_service_messages_Matrix_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_dk_alexandra_fresco_service_messages_Matrix_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014Common.proto\022$dk.alexandra.fresco.serv" +
      "ice.messages\"\027\n\006Vector\022\r\n\005value\030\001 \003(\001\"D\n" +
      "\006Matrix\022:\n\004rows\030\001 \003(\0132,.dk.alexandra.fre" +
      "sco.service.messages.Vectorb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_dk_alexandra_fresco_service_messages_Vector_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dk_alexandra_fresco_service_messages_Vector_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dk_alexandra_fresco_service_messages_Vector_descriptor,
        new java.lang.String[] { "Value", });
    internal_static_dk_alexandra_fresco_service_messages_Matrix_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dk_alexandra_fresco_service_messages_Matrix_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_dk_alexandra_fresco_service_messages_Matrix_descriptor,
        new java.lang.String[] { "Rows", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
